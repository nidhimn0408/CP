bool dfs(int cur, vector<vector<int>>&v ,vector<int>&vis, vector<int>&ans){
    vis[cur]=1;
    for(auto neigh:v[cur]){
        if(vis[neigh]==0){
            if(dfs(neigh,v,vis,ans)==false) return false;
        }
        else if(vis[neigh]==1) return false;
    }
    vis[cur]=2;
    ans.push_back(cur);
    return true;
}
int main(){
    vector<vector<int>>v(n);
    vector<int>vis(n,0);
    bool flag=true;
    vector<int>ans;
    for(int i=0;i<n;i++){
        if(vis[i]==0){
            flag = flag && dfs(i,v,vis,ans);
        }
    }
    if(flag){
         reverse(ans.begin(),ans.end()); return ans;
    }
    ans.clear();
    return ans;//if cycle exists , then no toposort
}

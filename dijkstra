#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
const ll mo =1e9+7;

void dijkstra(int src , vector<vector<pair<int,ll>>>&v , vector<ll>&dist , vector<int>&par){
    //tc : (m+n)*logn
    priority_queue< pair<ll,int> , vector<pair<ll,int>> , greater<pair<ll,int>> >pq;
    pq.push( {0,src} );
    dist[src]=0;
    
    while(!pq.empty()){
        
        pair<ll,int>mn = pq.top(); //min_node
        pq.pop();
        ll wt=mn.first; 
        int cur=mn.second;
        
        if(wt!=dist[cur]) continue;
        
        for(auto neigh:v[cur]){
            int node =neigh.first;
            ll w=neigh.second;
            
            if(dist[node] > dist[cur] + w){
                dist[node] = dist[cur] + w;
                pq.push( {dist[node],node} );
                par[node]=cur;
            }
        }
    }
}

void path(int x , vector<int>&par){
    while(x!=-1){
        cout<<x<<" ";
        x=par[x];
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n,m; cin>>n>>m;
    vector<vector<pair<int,ll>>>v(n+1);
    for(int i=0;i<m;i++){
        int a,b; ll c;
        cin>>a>>b>>c;
        v[a].push_back({b,c});
        v[b].push_back({a,c});
    }
    vector<ll>dist(n+1,1e16);
    vector<int>par(n+1,-1);
    dijkstra(1,v,dist,par);
    
    //min distance from each src to each node
    for(int i=1;i<=n;i++) cout<<dist[i]<<" "; cout<<endl;
    
    //parents:
    for(int i=1;i<=n;i++) cout<<par[i]<<" "; cout<<endl;
    
    //path:
    path(n,par); cout<<endl;
}



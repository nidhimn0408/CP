class TrieNode{
public:
    TrieNode * child[26];
    bool isEnd;
    TrieNode(){
        for(int i=0; i<26; i++) child[i]=NULL;
        isEnd=false;
    }
};

class Trie {
private:
    TrieNode *root;

public:

    /** Initialize your data structure here. */
    Trie() {
        root= new TrieNode();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode *cur=root;
        for(auto i:word){
            if(!cur->child[i-'a']) cur->child[i-'a']= new TrieNode();
            cur=cur->child[i-'a'];
        }
        cur->isEnd=true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode *cur=root;
        for(auto i:word){
            if(!cur->child[i-'a']) return false;
            cur=cur->child[i-'a'];
        }
        return cur->isEnd;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode *cur=root;
        for(auto i:prefix){
            if(!cur->child[i-'a']) return false;
            cur=cur->child[i-'a'];
        }
        return true;
    }
};
